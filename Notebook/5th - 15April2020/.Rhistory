install.packages("swirl")
library("swirl")
swirl()
setwd("~/Desktop/R_course/Notebook/5th - 15April2020")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = ".")
library(ggpubr)
library(ggplot2)
library(tidyverse)
devtools::install_github("covid19r/coronavirus")
devtools::install_github('thomasp85/gganimate')
devtools::install_github("thomasp85/ggforce")
install.package("ggforce")
install.packages("ggforce")
library(coronavirus)
library(readxl)
library(tibble)
library(gganimate)
library(ggforce)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = ".")
getwd()
library(readxl)
Exp <- read_xls("Session4 Files/ExperimentTwoDrugs.xls")
glimpse(Exp)
library(tibble)
glimpse(Exp)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(readxl)
library(tibble)
Exp %>% pivot_longer(cols = everything(),
names_to = "Treatment",
values_to = "Cells")
Exp %>% pivot_longer(cols = everything(),
names_to = "Treatment",
values_to = "Cells") %>%
drop_na() %>%
arrange(Treatment)
Exp %>% pivot_longer(cols = everything(),
names_to = "Treatment",
values_to = "Cells") %>%
drop_na() %>%
arrange(Treatment) -> Exp
head(Exp)
p.2Drug <- ggplot(data = Exp,
mapping = aes(x=Treatment, y=Cells))
p.2Drug
p.2Drug + geom_boxplot()
p.2Drug + geom_boxplot() + geom_point()
p.2Drug + geom_boxplot() + geom_jitter()
p.2Drug + geom_boxplot() + geom_jitter(color = "red")
p.2Drug + geom_boxplot() +
geom_jitter(mapping = aes(color = Treatment))
p.2Drug + geom_boxplot(color = "grey") +
geom_jitter(mapping = aes(color = Treatment))
p.2Drug + geom_boxplot(mapping = aes(color = Treatment)) +
geom_jitter(mapping = aes(color = Treatment))
p.2Drug +  geom_jitter(mapping = aes(color = Treatment)) +
geom_boxplot(mapping = aes(color = Treatment))
p.2Drug + geom_boxplot(mapping = aes(color = Treatment)) +
geom_jitter(mapping = aes(color = Treatment),
alpha = 0.5)
p.2Drug + geom_boxplot(mapping = aes(color = Treatment), outlier.shape = N) +
geom_jitter(mapping = aes(color = Treatment))
p.2Drug + geom_boxplot(mapping = aes(color = Treatment), outlier.shape = NA) +
geom_jitter(mapping = aes(color = Treatment))
p.2Drug + geom_boxplot(mapping = aes(color = Treatment), outlier.shape = NA) +
geom_jitter(mapping = aes(color = Treatment), alpha = 0.5)
p.2Drug + geom_boxplot(mapping = aes(color = Treatment), outlier.shape = NA) +
geom_jitter(mapping = aes(color = Treatment), alpha = 0.5) -> p.final
p.final
p.final + theme_classic()
p.final + theme_classic() +
theme(legend.position = "top") # bottom, left or right also available.
p.final + theme_classic() +
theme(legend.position = "top") # bottom, left or right also available.
p.final + theme_classic() +
theme(legend.position = "top") -> p.final # bottom, left or right also available.
p.final
p.final + stat_compare_means(method="anova")
p.final + stat_compare_means(method="anova",
label.y = 18) # Set the location of p-value
p.final + stat_compare_means(method="t.test",
ref.group = "control")
p.final + stat_compare_means(method="t.test",
ref.group = "Control")
p.final + stat_compare_means(method="t.test",
ref.group = "Control",
label = "p.signif") # Shows the significance level
p.final + stat_compare_means(method="t.test",
ref.group = "Control")
p.final + stat_compare_means(method="t.test",
ref.group = "Control",
label = "p.signif")
my_comparisons <- list(c("Control", "Drug1"),
c("Control", "Drug2"),
c("Drug1", "Drug2"))
p.final +
stat_compare_means(method = "anova",
label.y = 23) +
stat_compare_means(method = "t.test",
comparisons = my_comparisons,
label = "p.signif")
my_comparisons <- list(c("Control", "Drug1"),
c("Drug1", "Drug2"),
c("Control", "Drug2"))
p.final +
stat_compare_means(method = "anova",
label.y = 23) +
stat_compare_means(method = "t.test",
comparisons = my_comparisons,
label = "p.signif")
p.final +
stat_compare_means(method = "anova",
label.y = 23) +
stat_compare_means(method = "t.test",
comparisons = my_comparisons,
label = "p.signif") +
geom_violin()
p.final +
stat_compare_means(method = "anova",
label.y = 23) +
stat_compare_means(method = "t.test",
comparisons = my_comparisons,
label = "p.signif") +
geom_violin(alpha = 0.2)
p.final +
stat_compare_means(method = "anova",
label.y = 23) +
stat_compare_means(method = "t.test",
comparisons = my_comparisons,
label = "p.signif", cex = 20)
p.final +
stat_compare_means(method = "anova",
label.y = 23) +
stat_compare_means(method = "t.test",
comparisons = my_comparisons,
label = "p.signif") +
geom_violin()
p.final +
stat_compare_means(method = "anova",
label.y = 23) +
stat_compare_means(method = "t.test",
comparisons = my_comparisons,
label = "p.signif") +
geom_violin(alpha = 0.2)
ggsave(filename = "myplot.pdf")
ggsave(filename = "myplot.pdf")
Experiment <- read_xls("Session4 Files/ExperimentWithFeatures.xls")
glimpse(Experiment)
Experiment %>%
pivot_longer(cols = -Day,
names_to = c(".value", "Treatment"),
names_sep = "_") %>%
drop_na()
Experiment %>%
pivot_longer(cols = -Day,
names_to = c(".value", "Treatment"),
names_sep = "_") %>%
drop_na() %>%
arrange(Treatment)
Experiment %>%
pivot_longer(cols = -Day,
names_to = c(".value", "Treatment"),
names_sep = "_") %>%
drop_na() %>%
arrange(Treatment) -> Experiment
Experiment
p.Exp <- ggplot(data = Experiment,
mapping = aes(x = Treatment, y = Cells))
p.Exp + geom_boxplot()
p.Exp + geom_boxplot() + geom_jitter()
p.Exp + geom_boxplot() +
geom_jitter(mapping = aes(col = Gender))
p.Exp + geom_boxplot() +
geom_jitter(mapping = aes(col = Gender, shape = Day))
p.Exp + geom_boxplot() +
geom_jitter(mapping = aes(col = Gender, shape = Day),
size = 3)
p.Exp + geom_boxplot() +
geom_jitter(mapping = aes(col = Gender, shape = Day),
size = 3) +
theme_classic
p.Exp + geom_boxplot() +
geom_jitter(mapping = aes(col = Gender, shape = Day),
size = 3) +
theme_classic() + theme(legend.position = "bottom")
p.Exp + geom_boxplot() +
geom_jitter(mapping = aes(col = Gender, shape = Day),
size = 3) +
theme_classic() + theme(legend.position = "bottom") -> p.final
p.final + facet_grid(~Gender)
p.Exp + geom_boxplot() +
geom_jitter(mapping = aes(col = Age, shape = Day),
size = 3) +
theme_classic() + theme(legend.position = "bottom") -> p.final
p.final + facet_grid(~Gender)
p.Exp + geom_boxplot(aes(col = Treatment)) +
geom_jitter(mapping = aes(col = Age, shape = Day),
size = 3) +
theme_classic() + theme(legend.position = "bottom") -> p.final
p.final + facet_grid(~Gender)
p.Exp + geom_boxplot(aes(fill = Treatment)) +
geom_jitter(mapping = aes(col = Age, shape = Day),
size = 3) +
theme_classic() + theme(legend.position = "bottom") -> p.final
p.final + facet_grid(~Gender)
p.Exp + geom_boxplot(aes(fill = Treatment), alpha = 2.5) +
geom_jitter(mapping = aes(col = Age, shape = Day),
size = 3) +
theme_classic() + theme(legend.position = "bottom") -> p.final
p.final + facet_grid(~Gender)
p.Exp + geom_boxplot(aes(fill = Treatment), alpha = 25) +
geom_jitter(mapping = aes(col = Age, shape = Day),
size = 3) +
theme_classic() + theme(legend.position = "bottom") -> p.final
p.final + facet_grid(~Gender)
p.Exp + geom_boxplot(aes(fill = Treatment), alpha = 0.5) +
geom_jitter(mapping = aes(col = Age, shape = Day),
size = 3) +
theme_classic() + theme(legend.position = "bottom") -> p.final
p.final + facet_grid(~Gender)
p.final + facet_grid(~Gender) +
stat_compare_means(method = "t.test", label = "p.signif")
p.final + facet_grid(~Gender) +
stat_compare_means(method = "t.test", label = "p.signif",
ref.group = "Control")
library(coronavirus)
glimpse(coronavirus)
table(coronavirus$Country.Region)
coronavirus %>%
filter(type == "confirmed")
coronavirus %>%
filter(type == "confirmed") -> coronavirus
table(coronavirus$type)
coronavirus %>%
filter(type == "confirmed") -> coronavirus
table(coronavirus$type)
coronavirus %>%
group_by(Country.Region) %>%
mutate(TotalCases = cumsum(cases)) -> coronavirus
View(coronavirus)
country.select <- c("India", "US")
country.select <- c("India", "US")
country.select <- c("India", "US", "Singapore")
country.select <- c("India", "US", "Singapore")
coronavirus %>%
filter(Country.Region %in% country.select) -> coronavirus.select
p.corona <- ggplot(data = coronavirus.select,
mappoing = aes(x=date, y=TotalCases))
p.corona + geom_line(mapping = aes(col = Country.Region))
p.corona + geom_line(mapping = aes(color = Country.Region))
mappoing = aes(x=date, y=log10(TotalCases))
mapping = aes(x=date, y=log10(TotalCases))
mapping = aes(x=date, y=log10(TotalCases))
p.corona <- ggplot(data = coronavirus.select,
mapping = aes(x=date, y=log10(TotalCases)))
p.corona + geom_line(mapping = aes(color = Country.Region))
p.corona + geom_line(mapping = aes(color = Country.Region)) +
geom_point(mapping = aes(color = Country.Region))
p.corona <- ggplot(data = coronavirus.select,
mapping = aes(x=date, y=log10(TotalCases), col=Country.Region))
p.corona
p.corona + geom_line(mapping = aes(color = Country.Region))
p.corona + geom_line(m
p.corona <- ggplot(data = coronavirus.select,
p.corona <- ggplot(data = coronavirus.select,
mapping = aes(x=date, y=log10(TotalCases)))
p.corona +
geom_line(mapping = aes(color = Country.Region)) +
geom_point(mapping = aes(color = Country.Region)) +
transition_reveal(date)
library(gganimate)
p.corona +
geom_line(mapping = aes(color = Country.Region)) +
geom_point(mapping = aes(color = Country.Region)) +
transition_reveal(date)
library(ggforce)
library(ggforce)
p.corona +
geom_line(mapping = aes(color = Country.Region)) +
geom_point(mapping = aes(color = Country.Region)) +
facet_zoom(x = date > "2020-01-15" & date < "2020-02-15")
p.corona +
geom_line(mapping = aes(color = Country.Region)) +
geom_point(mapping = aes(color = Country.Region)) +
facet_zoom(x = date > "2020-01-15" & date < "2020-02-15")
p.corona <- ggplot(data = coronavirus.select,
mapping = aes(x=date, y=log10(TotalCases)))
p.corona + geom_line(mapping = aes(color = Country.Region))
p.corona + geom_line(mapping = aes(color = Country.Region)) +
geom_point(mapping = aes(color = Country.Region))
p.corona +
geom_line(mapping = aes(color = Country.Region)) +
geom_point(mapping = aes(color = Country.Region)) +
facet_zoom(x = date > "2020-01-15" & date < "2020-02-15")
p.corona +
geom_line(mapping = aes(color = Country.Region)) +
geom_point(mapping = aes(color = Country.Region)) +
facet_zoom(x = date > "2020-01-15" & date < "2020-02-15", y=log10(TotalCases) < 2)
